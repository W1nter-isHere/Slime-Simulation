#pragma kernel CSMain

struct slime
{
     int2 position;
     float angle;
     float speed;
     float time_elapsed;
     float4 color;
     uint multiplied_speed;
     uint valid;
};

StructuredBuffer<int2> poi;
int poi_count;

StructuredBuffer<float> steer_randoms;
StructuredBuffer<float> lifetime_randoms;
RWStructuredBuffer<slime> slimes;
RWTexture2D<float4> result;
uint width;
uint height;
int sensory_range;
float delta_time;
float speed;

void plot_line_low(const int x0, const int y0, const int x1, const int y1, const slime slime)
{
     int dx = x1 - x0;
     int dy = y1 - y0;
     int yi = 1;

     if (dy < 0)
     {
          yi = -1;
          dy = -dy;   
     }

     int d = 2 * dy - dx;
     int y = y0;

     for (int x = x0; x < x1; x++)
     {
          result[int2(x, y)] = slime.color;
          if (d > 0)
          {
               y = y + yi;
               d = d + 2 * (dy - dx);
          } else
          {
               d = d + 2*dy;
          }
     }
}
void plot_line_high(const int x0, const int y0, const int x1, const int y1, const slime slime)
{
     int dx = x1 - x0;
     int dy = y1 - y0;
     int xi = 1;
     if (dx < 0)
     {
          xi = -1;
          dx = -dx;
     }
     int d = (2 * dx) - dy;
     int x = x0;
     for (int y = y0; y <= y1; y++)
     {
          result[int2(x, y)] = slime.color;
          if (d > 0)
          {
               x = x + xi;
               d = d + (2 * (dx - dy));
          }
          else
          {
               d = d + 2*dx;
          }
     }
}
void plot_line(const int x0, const int y0, const int x1, const int y1, const slime slime)
{
     if (abs(y1 - y0) < abs(x1 - x0))
     {
          if (x0 > x1)
          {
               plot_line_low(x1, y1, x0, y0, slime);
          }
          else
          {
               plot_line_low(x0, y0, x1, y1, slime);
          }
     }
     else
     {
          if (y0 > y1)
          {
               plot_line_high(x1, y1, x0, y0, slime);
          }
          else
          {
               plot_line_high(x0, y0, x1, y1, slime);
          }
     }
}
float2 angle_to_vec(const float angle)
{
     return float2(cos(angle), sin(angle));
}    
float vec_to_angle(float2 vec)
{
     return atan2(vec.y, vec.x);
}
bool compare_colors(float3 color1, float3 color2)
{
     float3 ratio1 = color1 / max(color1.r, max(color1.g, color1.b));
     float3 ratio2 = color2 / max(color2.r, max(color2.g, color2.b));

     return (abs(ratio1.r - ratio2.r) <= 0.05) &&
            (abs(ratio1.g - ratio2.g) <= 0.05) &&
            (abs(ratio1.b - ratio2.b) <= 0.05);
}

float distance(int2 v1, int2 v2)
{
     return sqrt(pow((float) v2.x - v1.x, 2) + pow((float)v2.y - v1.y, 2));
}
float raycast(const int2 position, const float angle, slime slime)
{
     float sum = 0;
     float2 dir = angle_to_vec(angle);
     float2 pos = position;
     
     for (int i = 0; i < sensory_range; i++)
     {
          // Check if the current position is within the bounds of the texture
          if (pos.x < 0 || pos.x > width || pos.y < 0 || pos.y > height)
          {
               break;
          }

          int2 checking_pos = int2((int)pos.x, (int)pos.y);

          // check for poi
          for (int j = 0; j < poi_count; j++)
          {
               int2 curr_pos = poi[j];
               if (curr_pos.x == checking_pos.x && curr_pos.y == checking_pos.y)
               {
                    sum *= 2;
                    break;
               }
          }

          // check for different species
          float4 checking_color = result[checking_pos];

          if (checking_color.r != 0 || checking_color.b != 0 || checking_color.g != 0)
          {
               // color ratio does not match, its a different species
               if (!compare_colors(slime.color, checking_color))
               {
                    sum -= checking_color;
               } else
               {
                    sum += checking_color;
               }
          }

          // Move the current position along the ray in the direction of the angle
          pos += dir;
     }

     return sum; 
}

[numthreads(16,1,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
     slime s = slimes[id.x];
     if (s.valid != 1) return;

     if (s.time_elapsed > lifetime_randoms[id.x])
     {
          slimes[id.x].valid = 0;
          return;
     }

     s.speed = speed;
     
     const float rand = steer_randoms[id.x];
     const float left = raycast(s.position, s.angle + radians(25), s) * rand;
     const float front = raycast(s.position, s.angle, s) * rand;
     const float right = raycast(s.position, s.angle - radians(25), s) * rand;

     const float heaviest = max(max(left, front), right);     
     if (heaviest == left)
     {
          s.angle += radians(15) * rand;
     } else if (heaviest == right)
     {
          s.angle -= radians(15) * rand;
     }
     
     // calculate the new position
     int x = s.position.x + round(s.speed * cos(s.angle));
     int y = s.position.y + round(s.speed * sin(s.angle));

     // wall collision
     if (x < 0 || x >= width)
     {
          float2 vec = angle_to_vec(s.angle);
          vec.x = -vec.x;
          s.angle = vec_to_angle(vec);
     }
     if (y < 0 || y >= height)
     {
          float2 vec = angle_to_vec(s.angle);
          vec.y = -vec.y;
          s.angle = vec_to_angle(vec);
     }
     if (x < 0 || x >= width || y < 0 || y >= height)
     {
          // calculate the new position as the angle has changed
          x = s.position.x + round(s.speed * cos(s.angle));
          y = s.position.y + round(s.speed * sin(s.angle));
     }
     
     const int2 pos = int2(x, y);
     
     // plot a line on the texture
     plot_line(s.position.x, s.position.y, x, y, s);

     // update position
     s.position = pos;

     // update time
     s.time_elapsed += delta_time;
     
     // update the list
     slimes[id.x] = s;
}